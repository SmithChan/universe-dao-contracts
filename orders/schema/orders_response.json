{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OrdersResponse",
  "type": "object",
  "required": [
    "address"
  ],
  "properties": {
    "address": {
      "$ref": "#/definitions/Addr"
    },
    "grid_orders": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/GridConfig"
      }
    },
    "limit_orders": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/LimitConfig"
      }
    },
    "smart_orders": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/SmartConfig"
      }
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Denom": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GridConfig": {
      "type": "object",
      "required": [
        "buy_prices",
        "buy_step",
        "finished",
        "msg",
        "order_amount",
        "sell_prices",
        "sell_step",
        "token1_amount",
        "token2_amount",
        "token2_denom"
      ],
      "properties": {
        "buy_prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "buy_step": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "finished": {
          "type": "boolean"
        },
        "msg": {
          "$ref": "#/definitions/GridMsg"
        },
        "order_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "sell_prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "sell_step": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token1_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "token2_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "token2_denom": {
          "$ref": "#/definitions/Denom"
        }
      }
    },
    "GridMsg": {
      "description": "Grid Order ///////////////////////////////////////////////////////////////////////////////////////////",
      "type": "object",
      "required": [
        "num_grid_pairs",
        "pool_address",
        "price_range_percentage",
        "token1_denom",
        "total_amount"
      ],
      "properties": {
        "num_grid_pairs": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pool_address": {
          "$ref": "#/definitions/Addr"
        },
        "price_range_percentage": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token1_denom": {
          "$ref": "#/definitions/Denom"
        },
        "total_amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "LimitConfig": {
      "type": "object",
      "required": [
        "avg_buy_price",
        "finished",
        "initial_token1_amount",
        "msg",
        "target_buy_price",
        "token1_amount",
        "token2_amount",
        "token2_denom"
      ],
      "properties": {
        "avg_buy_price": {
          "$ref": "#/definitions/Uint128"
        },
        "finished": {
          "type": "boolean"
        },
        "initial_token1_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/LimitMsg"
        },
        "target_buy_price": {
          "$ref": "#/definitions/Uint128"
        },
        "token1_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "token2_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "token2_denom": {
          "$ref": "#/definitions/Denom"
        }
      }
    },
    "LimitMsg": {
      "description": "Limit Order ///////////////////////////////////////////////////////////////////////////////////////////",
      "type": "object",
      "required": [
        "pool_address",
        "take_profit_percentage",
        "token1_denom"
      ],
      "properties": {
        "pool_address": {
          "$ref": "#/definitions/Addr"
        },
        "take_profit_percentage": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token1_denom": {
          "$ref": "#/definitions/Denom"
        }
      }
    },
    "SmartConfig": {
      "type": "object",
      "required": [
        "avg_buy_price",
        "current_dca_point",
        "dca_amounts",
        "dca_prices",
        "finished",
        "msg",
        "target_buy_price",
        "token1_amount",
        "token2_amount",
        "token2_denom"
      ],
      "properties": {
        "avg_buy_price": {
          "$ref": "#/definitions/Uint128"
        },
        "current_dca_point": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "dca_amounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "dca_prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "finished": {
          "type": "boolean"
        },
        "msg": {
          "$ref": "#/definitions/SmartMsg"
        },
        "target_buy_price": {
          "$ref": "#/definitions/Uint128"
        },
        "token1_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "token2_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "token2_denom": {
          "$ref": "#/definitions/Denom"
        }
      }
    },
    "SmartMsg": {
      "description": "Smart Order ///////////////////////////////////////////////////////////////////////////////////////////",
      "type": "object",
      "required": [
        "dca_order_size",
        "dca_order_size_multiplier",
        "dca_step",
        "dca_step_multiplier",
        "initial_token1_amount",
        "num_dca_orders",
        "pool_address",
        "take_profit_percentage",
        "token1_denom"
      ],
      "properties": {
        "dca_order_size": {
          "$ref": "#/definitions/Uint128"
        },
        "dca_order_size_multiplier": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "dca_step": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "dca_step_multiplier": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "initial_token1_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "num_dca_orders": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pool_address": {
          "$ref": "#/definitions/Addr"
        },
        "take_profit_percentage": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token1_denom": {
          "$ref": "#/definitions/Denom"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
